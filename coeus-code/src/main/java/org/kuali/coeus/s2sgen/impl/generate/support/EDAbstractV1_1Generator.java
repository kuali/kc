/*
 * Copyright 2005-2014 The Kuali Foundation.
 * 
 * Licensed under the Educational Community License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.opensource.org/licenses/ecl1.php
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kuali.coeus.s2sgen.impl.generate.support;

import gov.grants.apply.forms.edAbstractV11.AbstractAttachmentsDocument;
import gov.grants.apply.forms.edAbstractV11.AbstractAttachmentsDocument.AbstractAttachments;
import gov.grants.apply.system.attachmentsV10.AttachedFileDataType;
import org.apache.xmlbeans.XmlObject;
import org.kuali.coeus.propdev.api.core.ProposalDevelopmentDocumentContract;
import org.kuali.coeus.propdev.api.attachment.NarrativeContract;
import org.kuali.coeus.s2sgen.impl.generate.FormGenerator;
import org.kuali.coeus.s2sgen.impl.generate.FormVersion;


/**
 * 
 * This class is used to generate XML Document object for grants.gov EDAbstractV1.1. This form is generated using XMLBean API's
 * generated by compiling EDAbstractV1.1 schema.
 * 
 * @author Kuali Research Administration Team (kualidev@oncourse.iu.edu)
 */
@FormGenerator("EDAbstractV1_1Generator")
public class EDAbstractV1_1Generator extends EDAbstractBaseGenerator {


    /**
     * 
     * This method returns AbstractAttachmentsDocument object based on proposal development document which contains the
     * AbstractAttachmentsDocument informations about abstract type attachment for a particular proposal
     * 
     * @return abstractDocument(AbstractAttachmentsDocument) {@link XmlObject} of type AbstractAttachmentsDocument.
     */
    private AbstractAttachmentsDocument getAbstractAttachments() {

        AbstractAttachmentsDocument abstractDocument = AbstractAttachmentsDocument.Factory.newInstance();
        AbstractAttachments abstractAttachments = AbstractAttachments.Factory.newInstance();
        abstractAttachments.setFormVersion(FormVersion.v1_1.getVersion());
        abstractAttachments.setAttachments(AttachedFileDataType.Factory.newInstance());
        AttachedFileDataType attachedFileDataType = null;
        for (NarrativeContract narrative : pdDoc.getDevelopmentProposal().getNarratives()) {
            if (narrative.getNarrativeType().getCode() != null && narrative.getNarrativeType().getCode().equals(ABSTRACT_ATTACHMENT_CODE)) {
            	attachedFileDataType = getAttachedFileType(narrative);
            	if(attachedFileDataType != null){
                	abstractAttachments.setAttachments(attachedFileDataType);
                }
            }
        }
        abstractDocument.setAbstractAttachments(abstractAttachments);
        return abstractDocument;
    }

    /**
     * This method creates {@link XmlObject} of type {@link AbstractAttachmentsDocument} by populating data from the given
     * {@link ProposalDevelopmentDocumentContract}
     * 
     * @param proposalDevelopmentDocument for which the {@link XmlObject} needs to be created
     * @return {@link XmlObject} which is generated using the given {@link ProposalDevelopmentDocumentContract}
     * 
     */
    public XmlObject getFormObject(ProposalDevelopmentDocumentContract proposalDevelopmentDocument) {

        this.pdDoc = proposalDevelopmentDocument;
        return getAbstractAttachments();
    }
}
